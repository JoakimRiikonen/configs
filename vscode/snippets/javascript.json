{
	// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	
	"console.log": {
		"prefix": "cl",
		"body": [
		"console.log('$1')",
		],
		"description": "Log output to console"
	},

	 // Declarations
	 "var statement": {
        "prefix": "v",
        "body": "var ${0}",
        "description": "var statement"
    },
    "var assignment": {
        "prefix": "v=",
        "body": "var ${1:name} = ${2:value};",
        "description": "var assignment"
    },
    "let statement": {
        "prefix": "l",
        "body": "let ${0}",
        "description": "let statement"
    },
    "let assignment": {
        "prefix": "l=",
        "body": "let ${1:name} = ${2:value};",
        "description": "let assignment"
    },	
	"destructuring let assignment": {
        "prefix": "dl=",
        "body": "let {${1:name}} = ${2:value};",
        "description": "destructuring let assignment"
    },
    "const statement": {
        "prefix": "co",
        "body": "const ${0}",
        "description": "const statement"
    },
    "const assignment": {
        "prefix": "co=",
        "body": "const ${1:name} = ${2:value};",
        "description": "const assignment"
    },
    "destructuring const assignment": {
        "prefix": "dco=",
        "body": "const {${1:name}} = ${2:value};",
        "description": "destructuring const assignment"
	},
	//Flow Control
	"if statement": {
        "prefix": "if",
        "body": "if (${1:condition}) {\n\t${0}\n}",
        "description": "if statement"
    },
    "else statement": {
        "prefix": "el",
        "body": "else {\n\t${0}\n}",
        "description": "else statement"
    },
    "if/else statement": {
        "prefix": "ife",
        "body": "if (${1:condition}) {\n\t${0}\n} else {\n\t\n}",
        "description": "if/else statement"
    },
    "else if statement": {
        "prefix": "ei",
        "body": "else if (${1:condition}) {\n\t${0}\n}",
        "description": "else if statement"
    },
    "ternary operator": {
        "prefix": "ter",
        "body": "${1:condition} ? ${2:expression} : ${3:expression};",
        "description": "ternary operator"
    },
    "for loop": {
        "prefix": "fl",
        "body": "for (let ${1:i} = 0, ${2:len} = ${3:iterable}.length; ${1:i} < ${2:len}; ${1:i}++) {\n\t${0}\n}",
        "description": "for loop"
    },
    "reverse for loop": {
        "prefix": "rfl",
        "body": "for (let ${1:i} = ${2:iterable}.length - 1; ${1:i} >= 0; ${1:i}--) {\n\t${0}\n}",
        "description": "reverse for loop"
    },
    "for in loop": {
        "prefix": "fi",
        "body": "for (let ${1:key} in ${2:array}) {\n\tif (${2:array}.hasOwnProperty(${1:key})) {\n\t\t${0}\n\t}\n}",
        "description": "for in loop"
    },
    "for of loop (ES6)": {
        "prefix": "fo",
        "body": "for (let ${1:key} of ${2:array}) {\n\t${0}\n}",
        "description": "for of loop (ES6)"
    },
    "while loop": {
        "prefix": "wl",
        "body": "while (${1:condition}) {\n\t${0}\n}",
        "description": "while loop"
    },
    "try/catch": {
        "prefix": "tc",
        "body": "try {\n\t${0}\n} catch (${1:err}) {\n\t\n}",
        "description": "try/catch"
    },
    "try/finally": {
        "prefix": "tf",
        "body": "try {\n\t${0}\n} finally {\n\t\n}",
        "description": "try/finally"
    },
    "try/catch/finally": {
        "prefix": "tcf",
        "body": "try {\n\t${0}\n} catch (${1:err}) {\n\t\n} finally {\n\t\n}",
        "description": "try/catch/finally"
    },
    "switch case": {
        "prefix": "sw",
        "body": "switch (${1:expr}) {\n\tcase ${2:value}:\n\t\treturn $0;\n\tdefault:\n\t\treturn;\n}",
        "description": "switch case"
	},
	//functions
	"anonymous function": {
        "prefix": "f",
        "body": "function (${1:arguments}) {\n\t${0}\n}",
        "description": "anonymous function"
    },
    "named function": {
        "prefix": "fn",
        "body": "function ${1:name}(${2:arguments}) {\n\t${0}\n}",
        "description": "named function"
    },
    "immediately-invoked function expression (IIFE)": {
        "prefix": "iife",
        "body": "((${1:arguments}) => {\n\t${0}\n})(${2});",
        "description": "immediately-invoked function expression (IIFE)"
    },/* 
    "function apply": {
        "prefix": "fa",
        "body": "${1:fn}.apply(${2:this}, ${3:arguments})",
        "description": "function apply"
    },
    "function call": {
        "prefix": "fc",
        "body": "${1:fn}.call(${2:this}, ${3:arguments})",
        "description": "function call"
    },
    "function bind": {
        "prefix": "fb",
        "body": "${1:fn}.bind(${2:this}, ${3:arguments})",
        "description": "function bind"
    }, */
    "arrow function (ES6)": {
        "prefix": "af",
        "body": "(${1:arguments}) => (${2:statement})",
        "description": "arrow function (ES6)"
    },
    "arrow function with body (ES6)": {
        "prefix": "afb",
        "body": "(${1:arguments}) => {\n\t${0}\n}",
        "description": "arrow function with body (ES6)"
	},
	"named (const) arrow function (ES6)": {
		"prefix": "naf",
		"body": "const ${1:name} = (${2:arguments}) => {\n\t${0}\n}",
		"description": "named (const) arrow function with body (ES6)"
	},/* 
    "generator function (ES6)": {
        "prefix": "gf",
        "body": "function* (${1:arguments}) {\n\t${0}\n}",
        "description": "generator function (ES6)"
    },
    "named generator function (ES6)": {
        "prefix": "gfn",
        "body": "function* ${1:name}(${2:arguments}) {\n\t${0}\n}",
        "description": "named generator function (ES6)"
	}, */
	// Iterables
    /* "sequence of 0..n": {
        "prefix": "seq",
        "body": "[...Array(${1:length}).keys()]${0}",
        "description": "sequence of 0..n"
    }, */
    "forEach loop": {
        "prefix": "fe",
        "body": "${1}.forEach((${2:item}) => {\n\t${0}\n});",
        "description": "forEach loop"
    },
    "map": {
        "prefix": "map",
        "body": "${1}.map((${2:item}) => {\n\t${0}\n});",
        "description": "map"
    },
    "reduce": {
        "prefix": "reduce",
        "body": "${1}.reduce((${2:previous}, ${3:current}) => {\n\t${0}\n}${4:, initial});",
        "description": "reduce"
    },
    "filter": {
        "prefix": "filter",
        "body": "${1}.filter(${2:item} => {\n\t${0}\n});",
        "description": "filter"
    },
    "find": {
        "prefix": "find",
        "body": "${1}.find(${2:item} => {\n\t${0}\n});",
        "description": "find"
	},
	//return
    "return complex value (such as JSX components)": {
        "prefix": "rc",
        "body": "return (\n\t${0}\n);",
        "description": "return complex value (such as JSX components)"
	},
	// Types
    "typeof": {
        "prefix": "tof",
        "body": "typeof ${1:source} === '${2:undefined}'",
        "description": "typeof"
    },
    "instanceof": {
        "prefix": "iof",
        "body": "${1:source} instanceof ${2:Object}",
        "description": "instanceof"
	},
	// ES6 Modules
    "export (ES6)": {
        "prefix": "ex",
        "body": "export ${1:member};",
        "description": "export (ES6)"
    },
    "export default (ES6)": {
        "prefix": "exd",
        "body": "export default ${1:member};",
        "description": "export default (ES6)"
    },
    "import module (ES6)": {
        "prefix": "im",
        "body": "import ${1:*} from '${2:module}';",
        "description": "import module (ES6)"
    },
    "import module as (ES6)": {
        "prefix": "ima",
        "body": "import ${1:*} as ${2:name} from '${3:module}';",
        "description": "import module as (ES6)"
    },
    //html tags
    "create div": {
        "prefix": "cdiv",
        "body" : "<div ${1}>${2}</div>",
        "description": "create div tags"
    },
    "create form": {
        "prefix": "cform",
        "body": "<form onSubmit=${1:onSubmit}>${2}</form>",
        "description": "create form tags"
    },
    "create button": {
        "prefix": "cbutton",
        "body": "<button onClick=${1:onClick}>${2}</button>",
        "description": "create button tags"
    },
    "create paragraph": {
        "prefix": "cp",
        "body": "<p>${1}</p>",
        "description": "create paragraph tags"
    },
    "create address": {
        "prefix": "ca",
        "body": "<a href='${1:href}'>${2}</a>",
        "description": "create address tags"
    },
    "create input": {
        "prefix": "cinput",
        "body": "<input ${1}/>",
        "description": "create input tag"
    },

}